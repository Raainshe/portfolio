name: Deploy to Digital Ocean

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Debug - Check secrets availability
      run: |
        echo "Checking if required secrets are available..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "‚ùå HOST secret is missing"
          exit 1
        else
          echo "‚úÖ HOST secret is available: ${{ secrets.HOST }}"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "‚ùå USERNAME secret is missing"
          exit 1
        else
          echo "‚úÖ USERNAME secret is available: ${{ secrets.USERNAME }}"
        fi
        
        if [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "‚ùå SSH_KEY secret is missing"
          exit 1
        else
          echo "‚úÖ SSH_KEY secret is available (length: ${#SSH_KEY} chars)"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "‚ùå PORT secret is missing"
          exit 1
        else
          echo "‚úÖ PORT secret is available: ${{ secrets.PORT }}"
        fi
        
        echo "All secrets are available. Proceeding with deployment..."
      
    - name: Test basic connectivity
      run: |
        echo "Testing basic network connectivity to ${{ secrets.HOST }}..."
        
        # Test if we can reach the host at all
        if ping -c 3 ${{ secrets.HOST }} > /dev/null 2>&1; then
          echo "‚úÖ Ping successful to ${{ secrets.HOST }}"
        else
          echo "‚ùå Ping failed to ${{ secrets.HOST }}"
          echo "This suggests a network connectivity issue"
        fi
        
        # Test if the port is reachable
        if nc -z -w 10 ${{ secrets.HOST }} ${{ secrets.PORT }}; then
          echo "‚úÖ Port ${{ secrets.PORT }} is reachable on ${{ secrets.HOST }}"
        else
          echo "‚ùå Port ${{ secrets.PORT }} is not reachable on ${{ secrets.HOST }}"
          echo "This suggests a firewall or SSH service issue"
        fi
      
    - name: Test SSH connection with verbose output
      run: |
        echo "Testing SSH connection with verbose output..."
        
        # Create a temporary SSH key file
        echo "${{ secrets.SSH_KEY }}" > /tmp/deploy_key
        chmod 600 /tmp/deploy_key
        
        # Test SSH with verbose output to see what's happening
        timeout 60 ssh -v -i /tmp/deploy_key \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=30 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=3 \
          -p ${{ secrets.PORT }} \
          ${{ secrets.USERNAME }}@${{ secrets.HOST }} \
          "echo 'SSH connection successful'"
        
        SSH_EXIT_CODE=$?
        
        if [ $SSH_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ SSH connection test passed"
        else
          echo "‚ùå SSH connection test failed with exit code: $SSH_EXIT_CODE"
          echo "Exit code meanings:"
          echo "  124 = timeout"
          echo "  255 = connection refused/network error"
          echo "  1 = authentication failed"
        fi
        
        # Clean up
        rm -f /tmp/deploy_key
      
    - name: Deploy to server
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "Starting deployment process..."
          
          # Stop nginx temporarily
          echo "Stopping nginx..."
          systemctl stop nginx || echo "Nginx was not running"
          
          # Remove old files
          echo "Removing old files..."
          rm -rf /var/www/html/*
          
          # Create a temporary directory for the new files
          echo "Creating temporary directory..."
          mkdir -p /tmp/vue-deploy
          
          echo "Server preparation completed."
          
    - name: Upload files
      if: success()
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        source: "dist/*"
        target: "/tmp/vue-deploy/"
        timeout: "300s"
        command_timeout: "300s"
        
    - name: Finalize deployment
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "Finalizing deployment..."
          
          # Check if files were uploaded
          if [ ! "$(ls -A /tmp/vue-deploy)" ]; then
            echo "‚ùå No files found in /tmp/vue-deploy. Upload may have failed."
            echo "Contents of /tmp/vue-deploy:"
            ls -la /tmp/vue-deploy || echo "Directory does not exist"
            exit 1
          fi
          
          echo "Files found in /tmp/vue-deploy:"
          ls -la /tmp/vue-deploy
          
          # Move files to web directory
          echo "Moving files to web directory..."
          mv /tmp/vue-deploy/* /var/www/html/
          
          # Set proper permissions
          echo "Setting permissions..."
          chown -R www-data:www-data /var/www/html
          chmod -R 755 /var/www/html
          
          # Start nginx
          echo "Starting nginx..."
          systemctl start nginx
          
          # Check if nginx started successfully
          if systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx started successfully"
          else
            echo "‚ùå Failed to start nginx"
            systemctl status nginx
            exit 1
          fi
          
          # Verify SSL configuration is still intact
          echo "Verifying SSL configuration..."
          if grep -q "ssl_certificate" /etc/nginx/sites-available/default; then
            echo "‚úÖ SSL configuration is preserved"
          else
            echo "‚ö†Ô∏è  SSL configuration may have been lost"
          fi
          
          # Test HTTPS accessibility
          echo "Testing HTTPS accessibility..."
          if curl -s -o /dev/null -w "%{http_code}" https://ryanmakoni.live | grep -q "200\|301\|302"; then
            echo "‚úÖ HTTPS is working correctly"
          else
            echo "‚ö†Ô∏è  HTTPS may not be working"
          fi
          
          # Clean up
          echo "Cleaning up temporary files..."
          rm -rf /tmp/vue-deploy
          
          echo "üéâ Deployment completed successfully!" 